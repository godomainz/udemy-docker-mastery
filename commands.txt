docker container start
docker container stop
docker container start -ai ubuntu


docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql
docker container run -d -p 80:80 --name nginx nginx
docker container top mysql
docker container inspect mysql
docker container stats
docker container ls
docker container ls -a


docker container run -it
docker container run -it --name ubuntu ubuntu
docker container start -ai ubuntu
docker container start ubuntu

docker container exec -it mysql bash (will keep the container running)


docker pull alpine
docker image ls

docker container run -p
docker container run -p 80:80 --name webhost -d nginx
docker container port webhost
docker container inspect --format '{{.NetworkSettings.IPAddress}}' webhost

docker network ls
docker network inspect
docker network create my_app_net
docker network create --driver
docker network connect
docker network disconnect
docker container run -d --name new_nginx --network my_app_net nginx

docker network connect 31a99139737606ab a19d3ce52813751
docker network connect NewNetWorkID ContainerID
docker container inspect new_nginx

docker network disconnect 5994a395cad15ffabbc 763e6555724552aa1
docker network connect NewNetWorkID ContainerID
docker container inspect webhost

docker container run -d --name my_nginx --network my_app_net nginx
docker container exec -it my_nginx ping new_nginx

docker container run --rm -it centos:7 bash

docker network create dude
docker run -d --net dude --net-alias search elasticsearch:2
docker run -d --net dude --net-alias search elasticsearch:2
docker container run --rm --net dude alpine nslookup search
docker container run --rm --net dude centos curl -s search:9200


docker image ls
docker history nginx:latest
docker history mysql
docker image tag nginx godomainz/nginx
docker image tag godomainz/nginx godomainz/nginx:testing


docker image build -t customnginx .

docker volume ls
docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v mysql-db:/var/lib/mysql mysql
docker volume inspect mysql-db
docker volume create --help

docker container run -d --name psql1 -v psql-db:/var/lib/postgresql/data postgres:9.6.1


Bind Mounting

docker container run -v /users/akila/stuff:/path/container     (mac/linux)
docker container run -v //users/akila/stuff:/path/container     (windows)
docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx
docker container run -d --name nginx -p 80:80 -v ${pwd}:/usr/share/nginx/html nginx
docker container run -d --name nginx -p 80:80 -v /${pwd}:/usr/share/nginx/html nginx
docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve

docker-compose up
docker-compose up -d
docker-compose logs
docker-compose ps
docker-compose top
docker-compose down
docker-compose down -v
docker-compose down -v --rmi local


Docker Swarm
docker-machine ls
docker-machine create
docker swarm init
docker swarm init  --advertise-addr $(docker-machine ip default)
docker node ls
docker swarm init  --advertise-addr 


docker service create alpine ping 8.8.8.8
docker service ls
docker service ps epic_neumann
docker service update epic_neumann --replicas 3
docker service rm epic_neumann


docker swarm init
docker swarm join
docker node ls
docker node update --role manager node2
docker swarm join-token manager
docker service create --replicas 3 alpine ping 8.8.8.8
docker node ps
docker node ps node3
docker service ps psql

docker network create --driver overlay mydrupal
docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgres
docker service ls
docker service ps psql

docker service create --name drupal --network mydrupal -p 80:80 drupal
docker service create --name nginx --network mydrupal -p 8080:80 nginx

docker service inspect drupal

docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2

docker network create --driver overlay backend
docker network create --driver overlay frontend
docker service create --name vote --network frontend --replicas 2 -p 80:80 dockersamples/examplevotingapp_vote:before
docker service create --name redis --network frontend redis:3.2
docker service create --name worker --network frontend --network backend dockersamples/examplevotingapp_worker
docker service create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4
docker service create --name result --network backend -p 5001:80 dockersamples/examplevotingapp_result:before


docker stack deploy -c example-voting-app-stack.yml voteapp
docker stack ps voteapp
docker stack services voteapp
docker network ls

docker secret create psql_user psql_user.txt
echo "myDBpassword" | docker secret create psql_pass -
docker secret ls

docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user postgres
docker service update --secret-rm
docker stack deploy -c docker-compose.yml mydb
docker stack rm mydb

echo "myDBpassword" | docker secret create psql-pw -
docker stack deploy -c docker-compose.yml mydrupal

windows

echo password | docker secret create psql_pass3 -
docker stack deploy -c docker-compose.yml mydrupal